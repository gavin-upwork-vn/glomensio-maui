@page "/SettingColorDeviceIot/{MacId}"
@using GlomensioApp.Model
@using GlomensioApp.Services
@using MudBlazor.Utilities
@using System.Drawing
@inject ISnackbar Snackbar
@inject IDeviceIotService DeviceIotService;
@inject NavigationManager Navigation
<style>
    .bordered-card {
        border: 2px solid black;
        padding: 10px;
        border-radius: 10px;
        max-width: 900px;
        margin: auto;
    }

    .centered-button {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
    }

    .mud-picker-color-picker {
        width: 200px; /* Set your desired size */
        height: 200px; /* Same as width */
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
    }

    .mud-picker-color-overlay {
        width: 100%;
        height: 100%;
        border-radius: 50%; /* Ensures a circular shape */
        position: absolute;
    }

    .mud-picker-color-selector {
        width: 26px;
        height: 26px;
    }

    .mud-item-color {
        width: 80px;
        height: 30px;
        border-radius: 15px;
        margin-left: auto;

</style>

<MudCard Class="bordered-card">
    <MudCardContent>
        <MudText Typo="Typo.h6" Align="Align.Center">Setting color</MudText>
    </MudCardContent>
</MudCard>

<MudCard Class="bordered-card" Style="margin-top: 5px;">
    <MudCardContent>
        <MudItem xs="12" Style="margin-bottom: 12px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <MudText Typo="Typo.subtitle1">Brightness</MudText>
                <MudText Typo="Typo.subtitle1">@brightnessValue</MudText>
            </div>
        </MudItem>
        <MudItem xs="12" Style="margin-bottom: 12px;">
            <div style="display: flex; align-items: center; gap: 8px;">
                <MudIcon Icon="@Icons.Material.Sharp.BrightnessLow" />
                <MudSlider @onchange="UpdateDevice" @bind-Value="brightnessValue" Min="10" Max="100" Color="MudBlazor.Color.Info" Style="flex-grow: 1;" />
                <MudIcon Icon="@Icons.Material.Sharp.BrightnessHigh" />
            </div>
        </MudItem>

        <MudItem xs="12" Style="margin-bottom: 12px;">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <MudText Typo="Typo.subtitle1">Color Temperature(K)</MudText>
                <MudText Typo="Typo.subtitle1">@kValue</MudText>
            </div>
        </MudItem>
        <MudItem xs="12" Style="margin-bottom: 12px;">
            <div style="display: flex; align-items: center; gap: 8px;">
                <MudIcon Icon="@Icons.Custom.Uncategorized.Radioactive" />
                <MudSlider @onchange="UpdateColorTemperature" @bind-Value="kValue" Min="2700" Max="4000" Color="MudBlazor.Color.Error" Style="flex-grow: 1;" />
                <MudIcon Icon="@Icons.Custom.Uncategorized.Radioactive" />
            </div>
        </MudItem>

        <MudGrid Spacing="2">
            <MudItem xs="6" >
                <MudColorPicker ShowAlpha="false" PickerVariant="PickerVariant.Static" @bind-Text="_colorValue" ValueChanged="SelectColor">
                    <MudButton OnClick="Close" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Close</MudButton>
                </MudColorPicker>
            </MudItem>
            <MudItem xs="6" >
            <MudGrid Justify="Justify.Center">
                @foreach (var colorItem in colorHistory)
                {
                    <MudItem xs="12">
                        <MudText Class="mud-item-color" Style="@($"background-color: {colorItem.Color}; width: 80px; height: 30px; border-radius: 15px; margin-left: auto;")">
                        </MudText>
                    </MudItem>
                }
            </MudGrid>
            </MudItem>
        </MudGrid>
    </MudCardContent>
    <MudButton OnClick="Close" Variant="Variant.Filled" Color="MudBlazor.Color.Primary">Close</MudButton>
</MudCard>
@code {
    private List<(string Color, DateTime TimeStamp)> colorHistory = new()
    {
        ("red", DateTime.Now),
        ("blue", DateTime.Now),
        ("yellow", DateTime.Now),
        ("green", DateTime.Now)
    };
    private string yellowgreen = "yellowgreen";
    private string red = "red";
    [Parameter]
    public string MacId { get; set; }
    private DeviceIot device;
    private int brightnessValue;
    private int kValue;
    private int redValue;
    private int greenValue;
    private int blueValue;
    private string _colorValue;


    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(MacId))
        {
            try
            {
                device = await DeviceIotService.GetDeviceByMacId(MacId);
                if (device == null)
                {
                    Snackbar.Add("Device not found", Severity.Error);
                }
                brightnessValue = device.Brightness;
                kValue = device.K;
                redValue = device.ColorR;
                greenValue = device.ColorG;
                blueValue = device.ColorB;
                _colorValue = $"#{redValue:X2}{greenValue:X2}{blueValue:X2}";
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error loading device: {ex.Message}", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Invalid device ID", Severity.Error);
        }
    }

    private async Task SelectColor()
    {
        var color = ColorTranslator.FromHtml(_colorValue);
        redValue = color.R;
        greenValue = color.G;
        blueValue = color.B;

        string newColor = $"rgb({redValue},{greenValue},{blueValue})";

        // Thêm màu mới vào danh sách với timestamp
        colorHistory.Add((newColor, DateTime.Now));

        // Nếu có hơn 4 ô màu, loại bỏ ô có timestamp lâu nhất
        if (colorHistory.Count > 4)
        {
            colorHistory = colorHistory.OrderByDescending(c => c.TimeStamp).Take(4).ToList();
        }

        await UpdateDevice();
    }

    private void Close()
    {
        Navigation.NavigateTo($"/UpdateDeviceIot/{MacId}");
    }

    private async Task UpdateColorTemperature()
    {
        var (r, g, b) = ColorTemperatureToRGB(kValue);
        _colorValue = $"#{r:X2}{g:X2}{b:X2}";
        redValue = r;
        greenValue = g;
        blueValue = b;
        // _colorValue = $"#{redValue:X2}{greenValue:X2}{blueValue:X2}";
        await UpdateDevice();

        StateHasChanged();
    }

    private async Task UpdateDevice()
    {
        try
        {
            device.ColorR = redValue;
            device.ColorG = greenValue;
            device.ColorB = blueValue;
            device.Brightness = brightnessValue;
            device.K = kValue;
            await DeviceIotService.UpdateDeviceAsync(device);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error updating device: {ex.Message}", Severity.Error);
        }
    }
    private (int R, int G, int B) ColorTemperatureToRGB(int kelvin)
    {
        double temp = kelvin / 100.0;
        double red, green, blue;

        if (temp <= 66)
        {
            red = 255;
        }
        else
        {
            red = temp - 60;
            red = 329.698727446 * Math.Pow(red, -0.1332047592);
            red = Math.Clamp(red, 0, 255);
        }

        if (temp <= 66)
        {
            green = temp;
            green = 99.4708025861 * Math.Log(green) - 161.1195681661;
            green = Math.Clamp(green, 0, 255);
        }
        else
        {
            green = temp - 60;
            green = 288.1221695283 * Math.Pow(green, -0.0755148492);
            green = Math.Clamp(green, 0, 255);
        }

        if (temp >= 66)
        {
            blue = 255;
        }
        else if (temp <= 19)
        {
            blue = 0;
        }
        else
        {
            blue = temp - 10;
            blue = 138.5177312231 * Math.Log(blue) - 305.0447927307;
            blue = Math.Clamp(blue, 0, 255);
        }

        return ((int)red, (int)green, (int)blue);
    }
}


