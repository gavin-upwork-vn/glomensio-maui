@page "/forgot"
@using GlomensioApp.Commons
@using GlomensioApp.Services.Accounts
@using GlomensioApp.Services.Accounts.Models
@using System.ComponentModel.DataAnnotations
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
<style>
    body, html {
        height: 100%;
        width: 100%;
        margin: 0;
        font-family: Arial, sans-serif;
        background-image: url('images/background.jpg');
        background-repeat: no-repeat;
        background-position: center;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .login-container {
        background-color: rgba(255, 255, 255, 0.8);
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        min-width: 400px;
        width: 100%;
    }
</style>

<MudContainer>
    <div class="login-container">
        <MudText Typo="Typo.h4" Style="font-weight: bold; color: chocolate">Forgot Password</MudText>
        <MudTextField @bind-Value="model.Email" Placeholder="Email" Variant="Variant.Outlined" Clearable="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Email" AdornmentColor="Color.Tertiary" Immediate="true" Style="color: black;" />
        <br />
        <br />
        <MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" @onclick="ForgotPasswordAsync" Disabled="@IsResetDisabled">Reset Password</MudButton>

        @if (showError)
        {
                <MudText Typo="Typo.body2" Color="@Color.Error">
                @errorMessage
                </MudText>
        }

    </div>
</MudContainer>
@code {
    public class ForgotPasswordArg
    {
        [Required]
        public string Email { get; set; }
    }
    private ForgotPasswordArg model = new ForgotPasswordArg();
    private bool showError = false;
    private string errorMessage = string.Empty;

    private bool IsResetDisabled => string.IsNullOrEmpty(model.Email);

    private async Task ForgotPasswordAsync()
    {
        try
        {
            showError = false;
            errorMessage = string.Empty;
            var result = await AccountService.ForgotPasswordAsync(new ForgotPasswordRequest()
                {
                    Email = model.Email,
                });

            if (result != null)
            {
                showError = false;
                StaticVariable.Email = model.Email;
                NavigationManager.NavigateTo("/resetPassword");
            }
            else
            {
                showError = true;
            }
        }
        catch (Exception ex)
        {
            showError = true;
            errorMessage = "An error occurred: " + ex.Message;
        }
    }
}