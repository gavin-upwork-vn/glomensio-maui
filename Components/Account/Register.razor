@page "/register"
@using System.ComponentModel.DataAnnotations
@using GlomensioApp.Services.Accounts
@using GlomensioApp.Services.Accounts.Models
@inject IAccountService AccountService
@inject NavigationManager NavigationManager
<style>
    body, html {
        height: 100%;
        width: 100%;
        margin: 0;
        font-family: Arial, sans-serif;
        background-image: url('images/background.jpg');
        background-repeat: no-repeat;
        background-position: center;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .login-container {
        background-color: rgba(255, 255, 255, 0.8);
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        min-width: 400px;
        width: 100%;
    }


</style>

<MudContainer>
    <div class="login-container">
        <MudText Typo="Typo.h4" Style="font-weight: bold; color: chocolate">Register</MudText>
        <MudTextField @bind-Value="model.Email" Placeholder="Email" Variant="Variant.Outlined" Clearable="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Email" AdornmentColor="Color.Tertiary" Immediate="true" Style="color: black;" />

        <MudTextField @bind-Value="model.Password" Placeholder="Password" Variant="Variant.Outlined" Clearable="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Lock" AdornmentColor="Color.Tertiary" Immediate="true" Style="color: black;" For="@(() => model.Password)" InputType="InputType.Password" />
        <MudCardHeader></MudCardHeader>
        <MudButton Variant="Variant.Filled" DropShadow="false" Color="Color.Primary" @onclick="DangKy">Register</MudButton>
         <MudCardHeader Style="display: flex; justify-content: center; align-items: center; color: black;">
            <MudText>Have an account?</MudText>
            <MudText Style="font-weight: bold; cursor: pointer;">
                <MudLink Href="/" Style="color: black;">Login</MudLink>
            </MudText>
        </MudCardHeader>
        @if (errors != null && errors.Any())
        {
            <div>
                @foreach (var error in errors)
                {
                    <MudText Typo="Typo.body2" Color="Color.Error">
                        @error
                    </MudText>
                }
            </div>
        }
    </div>
</MudContainer>
@code {
    public class RegisterArg
    {
        [Required]
        public string Email { get; set; }

        [Required]
        public string Password { get; set; }   
    }
    RegisterArg model = new RegisterArg();
    private List<string>? errors;
    private async Task DangKy()
    {
        var registerRequest = new RegisterRequest
            {
                Email = model.Email,
                Password = model.Password
            };

        var response = await AccountService.RegisterAsync(registerRequest);

        if (response != null && response.Success)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errors = response?.Errors ?? new List<string> { "Registration failed. Please try again." };
        }
    }
}

